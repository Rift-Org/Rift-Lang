{
    "simpleTerms": {

        "primitive_type": "type",

        "inner_attribute_item": "variable",
        "shorthand_field_identifier": "variable",
        "\"_\"": "variable",

        "boolean_literal": "number",
        "integer_literal": "number",
        "float_literal": "number",
        "char_literal": "string",
        "string_literal": "string",
        "raw_string_literal": "string",
        "escape_sequence": "string",
        "line_comment": "comment",
        "block_comment": "comment",

        "\"let\"": "modifier",
        "\"const\"": "modifier",
        "\"static\"": "modifier",
        "\"extern\"": "modifier",
        "\"dyn\"": "modifier",
        "\"trait\"": "modifier",
        "\"mod\"": "modifier",
        "\"pub\"": "modifier",
        "\"default\"": "modifier",
        "\"ref\"": "modifier",
        "mutable_specifier": "modifier",

        "\"fn\"": "control",
        "\"type\"": "control",
        "\"struct\"": "control",
        "\"enum\"": "control",
        "\"union\"": "control",
        "\"impl\"": "control",

        "\"unsafe\"": "control",
        "\"match\"": "control",
        "\"if\"": "control",
        "\"in\"": "control",
        "\"else\"": "control",
        "\"move\"": "control",
        "\"while\"": "control",
        "\"loop\"": "control",
        "\"for\"": "control",
        "\"return\"": "control",
        "\"continue\"": "control",
        "\"break\"": "control",
        "\"where\"": "control",
        "\"macro_rules!\"": "control",

        "self": "control",
        "super": "control",
        "crate": "control",

        "\".\"": "operator",
        "\"->\"": "operator",
        "\"=>\"": "operator",
        "\"-\"": "operator",
        "\"+\"": "operator",
        "\"/\"": "operator",
        "\"%\"": "operator",
        "\"++\"": "operator",
        "\"--\"": "operator",
        "\"==\"": "operator",
        "\"!\"": "operator",
        "\"!=\"": "operator",
        "\"<\"": "operator",
        "\">\"": "operator",
        "\">=\"": "operator",
        "\"<=\"": "operator",
        "\"&&\"": "operator",
        "\"||\"": "operator",
        "\"&\"": "operator",
        "\"|\"": "operator",
        "\"^\"": "operator",
        "\"~\"": "operator",
        "\"<<\"": "operator",
        "\">>\"": "operator",
        "\"=\"": "operator",
        "\"+=\"": "operator",
        "\"-=\"": "operator",
        "\"*=\"": "operator",
        "\"/=\"": "operator",
        "\"%=\"": "operator",
        "\"<<=\"": "operator",
        "\">>=\"": "operator",
        "\"&=\"": "operator",
        "\"^=\"": "operator",
        "\"|=\"": "operator",
        "\"?\"": "operator",
        "\"::\"": "operator",
        "\"..\"": "operator",
        "\"as\"": "operator",

        "\"use\"": "directive",
        "\"#\"": "directive",

        "\";\"": "punctuation",
        "\":\"": "punctuation",
        "\",\"": "punctuation",
        "\"{\"": "punctuation",
        "\"}\"": "punctuation"
    },

    "complexTerms": [
        "identifier", "field_identifier", "type_identifier",
        "\"(\"", "\")\"", "\"[\"", "\"]\"", "\"*\""],

    "complexScopes": {
        "type_identifier": "type",
        "scoped_type_identifier > type_identifier": "type",
        "use_declaration > identifier": "type",
        "use_declaration > scoped_identifier > identifier[-1]": "type",
        "use_list > identifier": "type",
        "use_list > scoped_identifier > identifier": "type",
        "use_wildcard > \"*\"": "type",
        "use_as_clause > identifier": "type",
        "tuple_struct_pattern > identifier": "type",
        "tuple_struct_pattern > scoped_identifier > identifier[-1]": "type",
        "enum_variant > identifier": "type",
        "match_pattern > scoped_identifier > identifier[-1]": "type",
        "unit_type > \"(\"": "type",
        "unit_type > \")\"": "type",

        "scoped_identifier > identifier": "scope",
        "scoped_type_identifier > identifier": "scope",
        "scoped_type_identifier > scoped_identifier > identifier": "scope",
        "scoped_identifier > scoped_identifier > identifier": "scope",
        "scoped_use_list > scoped_identifier > identifier": "scope",
        "scoped_use_list > identifier": "scope",
        "use_wildcard > scoped_identifier > identifier": "scope",
        "use_wildcard > identifier": "scope",
        "struct_pattern > scoped_type_identifier > identifier": "scope",
        "struct_expression > scoped_type_identifier > identifier": "scope",

        "identifier": "variable",
        "field_identifier": "variable",
        "scoped_identifier > identifier[-1]": "variable",

        "call_expression > identifier": "function",
        "call_expression > field_expression > field_identifier[-1]": "function",
        "call_expression > scoped_identifier > identifier[-1]": "function",
        "macro_invocation > identifier": "function",
        "macro_definition > identifier": "function",
        "generic_function > identifier": "function",
        "generic_function > field_expression > field_identifier": "function",
        "generic_function > scoped_identifier > identifier": "function",
        "function_item > identifier": "function",
        "function_signature_item > identifier": "function",

        "lifetime > identifier": "modifier",

        "meta_item > identifier": "directive",

        "\"*\"": "operator",
        "\"(\"": "punctuation",
        "\")\"": "punctuation",
        "\"[\"": "punctuation",
        "\"]\"": "punctuation",
        "unit_expression > \"(\"": "constant",
        "unit_expression > \")\"": "constant",
        "attribute_item > \"[\"": "directive",
        "attribute_item > \"]\"": "directive"
    }
}